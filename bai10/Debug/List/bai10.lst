
AVRASM ver. 2.1.30  C:\Users\admin\Desktop\KTMT\bai10\Debug\List\bai10.asm Fri Nov 13 15:17:59 2020

C:\Users\admin\Desktop\KTMT\bai10\Debug\List\bai10.asm(1090): warning: Register r5 already defined by the .DEF directive
C:\Users\admin\Desktop\KTMT\bai10\Debug\List\bai10.asm(1091): warning: Register r4 already defined by the .DEF directive
C:\Users\admin\Desktop\KTMT\bai10\Debug\List\bai10.asm(1092): warning: Register r7 already defined by the .DEF directive
C:\Users\admin\Desktop\KTMT\bai10\Debug\List\bai10.asm(1093): warning: Register r6 already defined by the .DEF directive
C:\Users\admin\Desktop\KTMT\bai10\Debug\List\bai10.asm(1094): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega128A
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128A
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _dht_nhiet_do=R5
                 	.DEF _dht_do_am=R4
                 	.DEF __lcd_x=R7
                 	.DEF __lcd_y=R6
                 	.DEF __lcd_maxx=R9
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0068 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _tbl10_G102:
000046 2710
000047 03e8
000048 0064
000049 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00004a 0001      	.DB  0x1,0x0
                 _tbl16_G102:
00004b 1000
00004c 0100
00004d 0010
00004e 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x0:
00004f 4f44
000050 4120
000051 204d
000052 7525      	.DB  0x44,0x4F,0x20,0x41,0x4D,0x20,0x25,0x75
000053 4e00
000054 4948
000055 5445
000056 4420      	.DB  0x0,0x4E,0x48,0x49,0x45,0x54,0x20,0x44
000057 204f
000058 7525
C:\Users\admin\Desktop\KTMT\bai10\Debug\List\bai10.asm(1148): warning: .cseg .db misalignment - padding zero byte
000059 0000      	.DB  0x4F,0x20,0x25,0x75,0x0
                 _0x2000003:
00005a c080      	.DB  0x80,0xC0
                 _0x2020060:
C:\Users\admin\Desktop\KTMT\bai10\Debug\List\bai10.asm(1152): warning: .cseg .db misalignment - padding zero byte
00005b 0001      	.DB  0x1
                 _0x2020000:
00005c 4e2d
00005d 4e41
00005e 4900
00005f 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\admin\Desktop\KTMT\bai10\Debug\List\bai10.asm(1155): warning: .cseg .db misalignment - padding zero byte
000060 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000061 0002      	.DW  0x02
000062 0510      	.DW  __base_y_G100
000063 00b4      	.DW  _0x2000003*2
                 
000064 0001      	.DW  0x01
000065 0514      	.DW  __seed_G101
000066 00b6      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
000067 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000068 94f8      	CLI
000069 27ee      	CLR  R30
00006a bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00006b e0f1      	LDI  R31,1
00006c bff5      	OUT  MCUCR,R31
00006d bfe5      	OUT  MCUCR,R30
00006e 93e0 006c 	STS  XMCRB,R30
                 
                 ;CLEAR R2-R14
000070 e08d      	LDI  R24,(14-2)+1
000071 e0a2      	LDI  R26,2
000072 27bb      	CLR  R27
                 __CLEAR_REG:
000073 93ed      	ST   X+,R30
000074 958a      	DEC  R24
000075 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000076 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000077 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000078 e0a0      	LDI  R26,LOW(__SRAM_START)
000079 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00007a 93ed      	ST   X+,R30
00007b 9701      	SBIW R24,1
00007c f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00007d ece2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00007e e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00007f 9185      	LPM  R24,Z+
000080 9195      	LPM  R25,Z+
000081 9700      	SBIW R24,0
000082 f061      	BREQ __GLOBAL_INI_END
000083 91a5      	LPM  R26,Z+
000084 91b5      	LPM  R27,Z+
000085 9005      	LPM  R0,Z+
000086 9015      	LPM  R1,Z+
000087 01bf      	MOVW R22,R30
000088 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000089 9005      	LPM  R0,Z+
00008a 920d      	ST   X+,R0
00008b 9701      	SBIW R24,1
00008c f7e1      	BRNE __GLOBAL_INI_LOOP
00008d 01fb      	MOVW R30,R22
00008e cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
00008f bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000090 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000091 bfed      	OUT  SPL,R30
000092 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000093 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000094 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000095 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000096 940c 00fe 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;/*
                 ; * bai10.c
                 ; viet chuong trinh doc du lieu t, h tu cam bien dht11
                 ; */
                 ;
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;#include <stdlib.h>
                 ;#include <stdio.h>
                 ;#include <stdint.h> //phai co dong nay
                 ;
                 ;#define DHT_ER 0
                 ;#define DHT_OK 1
                 ;
                 ;#define DHT_DATA_IN PINB.7
                 ;#define DHT_DATA_OUT PORTB.7
                 ;#define DHT_DDR_DATA DDRB.7
                 ;
                 ;char data[16];
                 ;unsigned char dht_nhiet_do, dht_do_am;
                 ;unsigned char DHT_GetTemHumi(unsigned char *tem,unsigned char *humi)
                 ; 0000 0017 {
                 
                 	.CSEG
                 _DHT_GetTemHumi:
                 ; .FSTART _DHT_GetTemHumi
                 ; 0000 0018     unsigned char buffer[5] = {0,0,0,0,0};
                 ; 0000 0019     unsigned char ii,i,checksum;
                 ; 0000 001A 
                 ; 0000 001B     DHT_DDR_DATA = 1;      //set cong ra
000098 93ba      	ST   -Y,R27
000099 93aa      	ST   -Y,R26
00009a 9725      	SBIW R28,5
00009b e0e0      	LDI  R30,LOW(0)
00009c 83e8      	ST   Y,R30
00009d 83e9      	STD  Y+1,R30
00009e 83ea      	STD  Y+2,R30
00009f 83eb      	STD  Y+3,R30
0000a0 83ec      	STD  Y+4,R30
0000a1 940e 0402 	CALL __SAVELOCR4
                 ;	*tem -> Y+11
                 ;	*humi -> Y+9
                 ;	buffer -> Y+4
                 ;	ii -> R17
                 ;	i -> R16
                 ;	checksum -> R19
0000a3 9abf      	SBI  0x17,7
                 ; 0000 001C     DHT_DATA_OUT = 0;
0000a4 98c7      	CBI  0x18,7
                 ; 0000 001D     delay_us(40);
                +
0000a5 e68b     +LDI R24 , LOW ( 107 )
                +__DELAY_USB_LOOP :
0000a6 958a     +DEC R24
0000a7 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 107
                 ; 0000 001E     DHT_DATA_OUT = 1;
0000a8 9ac7      	SBI  0x18,7
                 ; 0000 001F     delay_ms(30);
0000a9 e1ae      	LDI  R26,LOW(30)
0000aa e0b0      	LDI  R27,0
0000ab 940e 03d9 	CALL _delay_ms
                 ; 0000 0020     DHT_DATA_OUT = 1;
0000ad 9ac7      	SBI  0x18,7
                 ; 0000 0021     DHT_DDR_DATA = 0;    // set la loi vao
0000ae 98bf      	CBI  0x17,7
                 ; 0000 0022     delay_us(40);
                +
0000af e68b     +LDI R24 , LOW ( 107 )
                +__DELAY_USB_LOOP :
0000b0 958a     +DEC R24
0000b1 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 107
                 ; 0000 0023 
                 ; 0000 0024     if(DHT_DATA_IN) {
0000b2 9bb7      	SBIS 0x16,7
0000b3 c002      	RJMP _0xD
                 ; 0000 0025         return DHT_ER;
0000b4 e0e0      	LDI  R30,LOW(0)
0000b5 c044      	RJMP _0x20C0003
                 ; 0000 0026     }
                 ; 0000 0027     else while(!(DHT_DATA_IN)); //doi data len
                 _0xD:
                 _0xF:
0000b6 9bb7      	SBIS 0x16,7
0000b7 cffe      	RJMP _0xF
                 ; 0000 0028     delay_us(40);
                +
0000b8 e68b     +LDI R24 , LOW ( 107 )
                +__DELAY_USB_LOOP :
0000b9 958a     +DEC R24
0000ba f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 107
                 ; 0000 0029 
                 ; 0000 002A     if(!(DHT_DATA_IN)){
0000bb 99b7      	SBIC 0x16,7
0000bc c002      	RJMP _0x12
                 ; 0000 002B         return DHT_ER;
0000bd e0e0      	LDI  R30,LOW(0)
0000be c03b      	RJMP _0x20C0003
                 ; 0000 002C     }
                 ; 0000 002D     else while((DHT_DATA_IN));
                 _0x12:
                 _0x14:
0000bf 99b7      	SBIC 0x16,7
0000c0 cffe      	RJMP _0x14
                 ; 0000 002E 
                 ; 0000 002F     //bat dau doc du lieu
                 ; 0000 0030     for(i=0; i<5; i++)
0000c1 e000      	LDI  R16,LOW(0)
                 _0x18:
0000c2 3005      	CPI  R16,5
0000c3 f500      	BRSH _0x19
                 ; 0000 0031     {
                 ; 0000 0032         for(ii=0; ii<8; ii++)
0000c4 e010      	LDI  R17,LOW(0)
                 _0x1B:
0000c5 3018      	CPI  R17,8
0000c6 f4d8      	BRSH _0x1C
                 ; 0000 0033         {
                 ; 0000 0034             while((!DHT_DATA_IN)) ;  //doi data len 1
                 _0x1D:
0000c7 9bb7      	SBIS 0x16,7
0000c8 cffe      	RJMP _0x1D
                 ; 0000 0035             delay_us(30);
                +
0000c9 e580     +LDI R24 , LOW ( 80 )
                +__DELAY_USB_LOOP :
0000ca 958a     +DEC R24
0000cb f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 80
                 ; 0000 0036             if(DHT_DATA_IN)
0000cc 9bb7      	SBIS 0x16,7
0000cd c012      	RJMP _0x20
                 ; 0000 0037             {
                 ; 0000 0038                 buffer[i] |= (1<<(7-ii));    //lay 7 bit
0000ce 2fe0      	MOV  R30,R16
0000cf e0f0      	LDI  R31,0
0000d0 01de      	MOVW R26,R28
0000d1 9614      	ADIW R26,4
0000d2 0fea      	ADD  R30,R26
0000d3 1ffb      	ADC  R31,R27
0000d4 01bf      	MOVW R22,R30
0000d5 8010      	LD   R1,Z
0000d6 e0e7      	LDI  R30,LOW(7)
0000d7 1be1      	SUB  R30,R17
0000d8 e0a1      	LDI  R26,LOW(1)
0000d9 940e 03eb 	CALL __LSLB12
0000db 29e1      	OR   R30,R1
0000dc 01db      	MOVW R26,R22
0000dd 93ec      	ST   X,R30
                 ; 0000 0039                 while((DHT_DATA_IN)) ;//doi data xuong 0
                 _0x21:
0000de 99b7      	SBIC 0x16,7
0000df cffe      	RJMP _0x21
                 ; 0000 003A             }
                 ; 0000 003B         }
                 _0x20:
0000e0 5f1f      	SUBI R17,-1
0000e1 cfe3      	RJMP _0x1B
                 _0x1C:
                 ; 0000 003C     }
0000e2 5f0f      	SUBI R16,-1
0000e3 cfde      	RJMP _0x18
                 _0x19:
                 ; 0000 003D     //tinh toan checksum
                 ; 0000 003E     checksum = buffer[0]+  buffer[1]+  buffer[2] + buffer[3] ;
0000e4 81ed      	LDD  R30,Y+5
0000e5 81ac      	LDD  R26,Y+4
0000e6 0fea      	ADD  R30,R26
0000e7 81ae      	LDD  R26,Y+6
0000e8 0fea      	ADD  R30,R26
0000e9 81af      	LDD  R26,Y+7
0000ea 0fea      	ADD  R30,R26
0000eb 2f3e      	MOV  R19,R30
                 ; 0000 003F     //kiem tra checksum
                 ; 0000 0040     if((checksum) != buffer[4]){
0000ec 85e8      	LDD  R30,Y+8
0000ed 17e3      	CP   R30,R19
0000ee f011      	BREQ _0x24
                 ; 0000 0041         return DHT_ER;
0000ef e0e0      	LDI  R30,LOW(0)
0000f0 c009      	RJMP _0x20C0003
                 ; 0000 0042     }
                 ; 0000 0043     //Lay du lieu
                 ; 0000 0044     *tem = buffer[2];
                 _0x24:
0000f1 81ee      	LDD  R30,Y+6
0000f2 85ab      	LDD  R26,Y+11
0000f3 85bc      	LDD  R27,Y+11+1
0000f4 93ec      	ST   X,R30
                 ; 0000 0045     *humi = buffer[0];
0000f5 81ec      	LDD  R30,Y+4
0000f6 85a9      	LDD  R26,Y+9
0000f7 85ba      	LDD  R27,Y+9+1
0000f8 93ec      	ST   X,R30
                 ; 0000 0046     return DHT_OK;
0000f9 e0e1      	LDI  R30,LOW(1)
                 _0x20C0003:
0000fa 940e 0409 	CALL __LOADLOCR4
0000fc 962d      	ADIW R28,13
0000fd 9508      	RET
                 ; 0000 0047 }
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 004A {
                 _main:
                 ; .FSTART _main
                 ; 0000 004B DDRD = 0x80;    //BL LCD
0000fe e8e0      	LDI  R30,LOW(128)
0000ff bbe1      	OUT  0x11,R30
                 ; 0000 004C PORTD = 0x80;
000100 bbe2      	OUT  0x12,R30
                 ; 0000 004D lcd_init(16);
000101 e1a0      	LDI  R26,LOW(16)
000102 d098      	RCALL _lcd_init
                 ; 0000 004E while (1)
                 _0x25:
                 ; 0000 004F     {
                 ; 0000 0050         if(DHT_GetTemHumi(&dht_nhiet_do, &dht_do_am))
000103 e0e5      	LDI  R30,LOW(5)
000104 e0f0      	LDI  R31,HIGH(5)
000105 93fa      	ST   -Y,R31
000106 93ea      	ST   -Y,R30
000107 e0a4      	LDI  R26,LOW(4)
000108 e0b0      	LDI  R27,HIGH(4)
000109 df8e      	RCALL _DHT_GetTemHumi
00010a 30e0      	CPI  R30,0
00010b f0e9      	BREQ _0x28
                 ; 0000 0051         {
                 ; 0000 0052             lcd_clear();
00010c d05c      	RCALL _lcd_clear
                 ; 0000 0053             lcd_gotoxy(0,0);
00010d e0e0      	LDI  R30,LOW(0)
00010e 93ea      	ST   -Y,R30
00010f e0a0      	LDI  R26,LOW(0)
000110 940e 038b 	CALL SUBOPT_0x0
                 ; 0000 0054             sprintf(data,"DO AM %u",(uint8_t)dht_do_am);
                +
000112 e9ee     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
000113 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
000114 93fa      	ST   -Y,R31
000115 93ea      	ST   -Y,R30
000116 2de4      	MOV  R30,R4
000117 940e 0392 	CALL SUBOPT_0x1
                 ; 0000 0055             lcd_puts(data);
                 ; 0000 0056             lcd_gotoxy(0,1);
000119 e0e0      	LDI  R30,LOW(0)
00011a 93ea      	ST   -Y,R30
00011b e0a1      	LDI  R26,LOW(1)
00011c 940e 038b 	CALL SUBOPT_0x0
                 ; 0000 0057             sprintf(data,"NHIET DO %u",(uint8_t)dht_nhiet_do);
                +
00011e eae7     +LDI R30 , LOW ( 2 * _0x0 + ( 9 ) )
00011f e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 9 ) )
                 	__POINTW1FN _0x0,9
000120 93fa      	ST   -Y,R31
000121 93ea      	ST   -Y,R30
000122 2de5      	MOV  R30,R5
000123 940e 0392 	CALL SUBOPT_0x1
                 ; 0000 0058             lcd_puts(data);
                 ; 0000 0059             delay_ms(300);
000125 e2ac      	LDI  R26,LOW(300)
000126 e0b1      	LDI  R27,HIGH(300)
000127 940e 03d9 	CALL _delay_ms
                 ; 0000 005A         }
                 ; 0000 005B 
                 ; 0000 005C     }
                 _0x28:
000129 cfd9      	RJMP _0x25
                 ; 0000 005D }
                 _0x29:
00012a cfff      	RJMP _0x29
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
00012b 93aa      	ST   -Y,R26
00012c 81e8      	LD   R30,Y
00012d 71e0      	ANDI R30,LOW(0x10)
00012e f011      	BREQ _0x2000004
00012f 9adb      	SBI  0x1B,3
000130 c001      	RJMP _0x2000005
                 _0x2000004:
000131 98db      	CBI  0x1B,3
                 _0x2000005:
000132 81e8      	LD   R30,Y
000133 72e0      	ANDI R30,LOW(0x20)
000134 f011      	BREQ _0x2000006
000135 9adc      	SBI  0x1B,4
000136 c001      	RJMP _0x2000007
                 _0x2000006:
000137 98dc      	CBI  0x1B,4
                 _0x2000007:
000138 81e8      	LD   R30,Y
000139 74e0      	ANDI R30,LOW(0x40)
00013a f011      	BREQ _0x2000008
00013b 9add      	SBI  0x1B,5
00013c c001      	RJMP _0x2000009
                 _0x2000008:
00013d 98dd      	CBI  0x1B,5
                 _0x2000009:
00013e 81e8      	LD   R30,Y
00013f 78e0      	ANDI R30,LOW(0x80)
000140 f011      	BREQ _0x200000A
000141 9ade      	SBI  0x1B,6
000142 c001      	RJMP _0x200000B
                 _0x200000A:
000143 98de      	CBI  0x1B,6
                 _0x200000B:
                +
000144 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000145 958a     +DEC R24
000146 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000147 9ada      	SBI  0x1B,2
                +
000148 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000149 958a     +DEC R24
00014a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00014b 98da      	CBI  0x1B,2
                +
00014c e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00014d 958a     +DEC R24
00014e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00014f c078      	RJMP _0x20C0002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000150 93aa      	ST   -Y,R26
000151 81a8      	LD   R26,Y
000152 dfd8      	RCALL __lcd_write_nibble_G100
000153 81e8          ld    r30,y
000154 95e2          swap  r30
000155 83e8          st    y,r30
000156 81a8      	LD   R26,Y
000157 dfd3      	RCALL __lcd_write_nibble_G100
                +
000158 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000159 958a     +DEC R24
00015a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
00015b c06c      	RJMP _0x20C0002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00015c 93aa      	ST   -Y,R26
00015d 81e8      	LD   R30,Y
00015e e0f0      	LDI  R31,0
00015f 5fe0      	SUBI R30,LOW(-__base_y_G100)
000160 4ffa      	SBCI R31,HIGH(-__base_y_G100)
000161 81e0      	LD   R30,Z
000162 81a9      	LDD  R26,Y+1
000163 0fae      	ADD  R26,R30
000164 dfeb      	RCALL __lcd_write_data
000165 8079      	LDD  R7,Y+1
000166 8068      	LDD  R6,Y+0
000167 9622      	ADIW R28,2
000168 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000169 e0a2      	LDI  R26,LOW(2)
00016a 940e 039f 	CALL SUBOPT_0x2
00016c e0ac      	LDI  R26,LOW(12)
00016d dfe2      	RCALL __lcd_write_data
00016e e0a1      	LDI  R26,LOW(1)
00016f 940e 039f 	CALL SUBOPT_0x2
000171 e0e0      	LDI  R30,LOW(0)
000172 2e6e      	MOV  R6,R30
000173 2e7e      	MOV  R7,R30
000174 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000175 93aa      	ST   -Y,R26
000176 81a8      	LD   R26,Y
000177 30aa      	CPI  R26,LOW(0xA)
000178 f011      	BREQ _0x2000011
000179 1479      	CP   R7,R9
00017a f048      	BRLO _0x2000010
                 _0x2000011:
00017b e0e0      	LDI  R30,LOW(0)
00017c 93ea      	ST   -Y,R30
00017d 9463      	INC  R6
00017e 2da6      	MOV  R26,R6
00017f dfdc      	RCALL _lcd_gotoxy
000180 81a8      	LD   R26,Y
000181 30aa      	CPI  R26,LOW(0xA)
000182 f409      	BRNE _0x2000013
000183 c044      	RJMP _0x20C0002
                 _0x2000013:
                 _0x2000010:
000184 9473      	INC  R7
000185 9ad8      	SBI  0x1B,0
000186 81a8      	LD   R26,Y
000187 dfc8      	RCALL __lcd_write_data
000188 98d8      	CBI  0x1B,0
000189 c03e      	RJMP _0x20C0002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
00018a 93ba      	ST   -Y,R27
00018b 93aa      	ST   -Y,R26
00018c 931a      	ST   -Y,R17
                 _0x2000014:
00018d 81a9      	LDD  R26,Y+1
00018e 81ba      	LDD  R27,Y+1+1
00018f 91ed      	LD   R30,X+
000190 83a9      	STD  Y+1,R26
000191 83ba      	STD  Y+1+1,R27
000192 2f1e      	MOV  R17,R30
000193 30e0      	CPI  R30,0
000194 f019      	BREQ _0x2000016
000195 2fa1      	MOV  R26,R17
000196 dfde      	RCALL _lcd_putchar
000197 cff5      	RJMP _0x2000014
                 _0x2000016:
000198 8118      	LDD  R17,Y+0
000199 9623      	ADIW R28,3
00019a 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00019b 93aa      	ST   -Y,R26
00019c 9ad3      	SBI  0x1A,3
00019d 9ad4      	SBI  0x1A,4
00019e 9ad5      	SBI  0x1A,5
00019f 9ad6      	SBI  0x1A,6
0001a0 9ad2      	SBI  0x1A,2
0001a1 9ad0      	SBI  0x1A,0
0001a2 9ad1      	SBI  0x1A,1
0001a3 98da      	CBI  0x1B,2
0001a4 98d8      	CBI  0x1B,0
0001a5 98d9      	CBI  0x1B,1
0001a6 8098      	LDD  R9,Y+0
0001a7 81e8      	LD   R30,Y
0001a8 58e0      	SUBI R30,-LOW(128)
                +
0001a9 93e0 0512+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
0001ab 81e8      	LD   R30,Y
0001ac 54e0      	SUBI R30,-LOW(192)
                +
0001ad 93e0 0513+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
0001af e1a4      	LDI  R26,LOW(20)
0001b0 e0b0      	LDI  R27,0
0001b1 940e 03d9 	CALL _delay_ms
0001b3 940e 03a5 	CALL SUBOPT_0x3
0001b5 940e 03a5 	CALL SUBOPT_0x3
0001b7 940e 03a5 	CALL SUBOPT_0x3
0001b9 e2a0      	LDI  R26,LOW(32)
0001ba df70      	RCALL __lcd_write_nibble_G100
                +
0001bb ec88     +LDI R24 , LOW ( 200 )
0001bc e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0001bd 9701     +SBIW R24 , 1
0001be f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0001bf e2a8      	LDI  R26,LOW(40)
0001c0 df8f      	RCALL __lcd_write_data
0001c1 e0a4      	LDI  R26,LOW(4)
0001c2 df8d      	RCALL __lcd_write_data
0001c3 e8a5      	LDI  R26,LOW(133)
0001c4 df8b      	RCALL __lcd_write_data
0001c5 e0a6      	LDI  R26,LOW(6)
0001c6 df89      	RCALL __lcd_write_data
0001c7 dfa1      	RCALL _lcd_clear
                 _0x20C0002:
0001c8 9621      	ADIW R28,1
0001c9 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G102:
                 ; .FSTART _put_buff_G102
0001ca 93ba      	ST   -Y,R27
0001cb 93aa      	ST   -Y,R26
0001cc 931a      	ST   -Y,R17
0001cd 930a      	ST   -Y,R16
0001ce 81aa      	LDD  R26,Y+2
0001cf 81bb      	LDD  R27,Y+2+1
0001d0 9612      	ADIW R26,2
0001d1 940e 03f3 	CALL __GETW1P
0001d3 9730      	SBIW R30,0
0001d4 f159      	BREQ _0x2040010
0001d5 81aa      	LDD  R26,Y+2
0001d6 81bb      	LDD  R27,Y+2+1
0001d7 9614      	ADIW R26,4
0001d8 940e 03f3 	CALL __GETW1P
0001da 018f      	MOVW R16,R30
0001db 9730      	SBIW R30,0
0001dc f061      	BREQ _0x2040012
                +
0001dd 3002     +CPI R16 , LOW ( 2 )
0001de e0e0     +LDI R30 , HIGH ( 2 )
0001df 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0001e0 f098      	BRLO _0x2040013
0001e1 01f8      	MOVW R30,R16
0001e2 9731      	SBIW R30,1
0001e3 018f      	MOVW R16,R30
                +
0001e4 81aa     +LDD R26 , Y + 2
0001e5 81bb     +LDD R27 , Y + 2 + 1
0001e6 9614     +ADIW R26 , 4
0001e7 93ed     +ST X + , R30
0001e8 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2040012:
0001e9 81aa      	LDD  R26,Y+2
0001ea 81bb      	LDD  R27,Y+2+1
0001eb 9612      	ADIW R26,2
0001ec 91ed      	LD   R30,X+
0001ed 91fd      	LD   R31,X+
0001ee 9631      	ADIW R30,1
0001ef 93fe      	ST   -X,R31
0001f0 93ee      	ST   -X,R30
0001f1 9731      	SBIW R30,1
0001f2 81ac      	LDD  R26,Y+4
0001f3 83a0      	STD  Z+0,R26
                 _0x2040013:
0001f4 81aa      	LDD  R26,Y+2
0001f5 81bb      	LDD  R27,Y+2+1
0001f6 940e 03f3 	CALL __GETW1P
0001f8 23ff      	TST  R31
0001f9 f02a      	BRMI _0x2040014
0001fa 91ed      	LD   R30,X+
0001fb 91fd      	LD   R31,X+
0001fc 9631      	ADIW R30,1
0001fd 93fe      	ST   -X,R31
0001fe 93ee      	ST   -X,R30
                 _0x2040014:
0001ff c006      	RJMP _0x2040015
                 _0x2040010:
000200 81aa      	LDD  R26,Y+2
000201 81bb      	LDD  R27,Y+2+1
000202 efef      	LDI  R30,LOW(65535)
000203 efff      	LDI  R31,HIGH(65535)
000204 93ed      	ST   X+,R30
000205 93fc      	ST   X,R31
                 _0x2040015:
000206 8119      	LDD  R17,Y+1
000207 8108      	LDD  R16,Y+0
000208 9625      	ADIW R28,5
000209 9508      	RET
                 ; .FEND
                 __print_G102:
                 ; .FSTART __print_G102
00020a 93ba      	ST   -Y,R27
00020b 93aa      	ST   -Y,R26
00020c 9726      	SBIW R28,6
00020d 940e 0400 	CALL __SAVELOCR6
00020f e010      	LDI  R17,0
000210 85ac      	LDD  R26,Y+12
000211 85bd      	LDD  R27,Y+12+1
000212 e0e0      	LDI  R30,LOW(0)
000213 e0f0      	LDI  R31,HIGH(0)
000214 93ed      	ST   X+,R30
000215 93fc      	ST   X,R31
                 _0x2040016:
000216 89ea      	LDD  R30,Y+18
000217 89fb      	LDD  R31,Y+18+1
000218 9631      	ADIW R30,1
000219 8bea      	STD  Y+18,R30
00021a 8bfb      	STD  Y+18+1,R31
00021b 9731      	SBIW R30,1
00021c 91e4      	LPM  R30,Z
00021d 2f2e      	MOV  R18,R30
00021e 30e0      	CPI  R30,0
00021f f409      	BRNE PC+2
000220 c115      	RJMP _0x2040018
000221 2fe1      	MOV  R30,R17
000222 30e0      	CPI  R30,0
000223 f439      	BRNE _0x204001C
000224 3225      	CPI  R18,37
000225 f411      	BRNE _0x204001D
000226 e011      	LDI  R17,LOW(1)
000227 c002      	RJMP _0x204001E
                 _0x204001D:
000228 940e 03ad 	CALL SUBOPT_0x4
                 _0x204001E:
00022a c10a      	RJMP _0x204001B
                 _0x204001C:
00022b 30e1      	CPI  R30,LOW(0x1)
00022c f4a9      	BRNE _0x204001F
00022d 3225      	CPI  R18,37
00022e f419      	BRNE _0x2040020
00022f 940e 03ad 	CALL SUBOPT_0x4
000231 c102      	RJMP _0x20400CC
                 _0x2040020:
000232 e012      	LDI  R17,LOW(2)
000233 e040      	LDI  R20,LOW(0)
000234 e000      	LDI  R16,LOW(0)
000235 322d      	CPI  R18,45
000236 f411      	BRNE _0x2040021
000237 e001      	LDI  R16,LOW(1)
000238 c0fc      	RJMP _0x204001B
                 _0x2040021:
000239 322b      	CPI  R18,43
00023a f411      	BRNE _0x2040022
00023b e24b      	LDI  R20,LOW(43)
00023c c0f8      	RJMP _0x204001B
                 _0x2040022:
00023d 3220      	CPI  R18,32
00023e f411      	BRNE _0x2040023
00023f e240      	LDI  R20,LOW(32)
000240 c0f4      	RJMP _0x204001B
                 _0x2040023:
000241 c002      	RJMP _0x2040024
                 _0x204001F:
000242 30e2      	CPI  R30,LOW(0x2)
000243 f439      	BRNE _0x2040025
                 _0x2040024:
000244 e050      	LDI  R21,LOW(0)
000245 e013      	LDI  R17,LOW(3)
000246 3320      	CPI  R18,48
000247 f411      	BRNE _0x2040026
000248 6800      	ORI  R16,LOW(128)
000249 c0eb      	RJMP _0x204001B
                 _0x2040026:
00024a c003      	RJMP _0x2040027
                 _0x2040025:
00024b 30e3      	CPI  R30,LOW(0x3)
00024c f009      	BREQ PC+2
00024d c0e7      	RJMP _0x204001B
                 _0x2040027:
00024e 3320      	CPI  R18,48
00024f f010      	BRLO _0x204002A
000250 332a      	CPI  R18,58
000251 f008      	BRLO _0x204002B
                 _0x204002A:
000252 c007      	RJMP _0x2040029
                 _0x204002B:
000253 e0aa      	LDI  R26,LOW(10)
000254 9f5a      	MUL  R21,R26
000255 2d50      	MOV  R21,R0
000256 2fe2      	MOV  R30,R18
000257 53e0      	SUBI R30,LOW(48)
000258 0f5e      	ADD  R21,R30
000259 c0db      	RJMP _0x204001B
                 _0x2040029:
00025a 2fe2      	MOV  R30,R18
00025b 36e3      	CPI  R30,LOW(0x63)
00025c f449      	BRNE _0x204002F
00025d 940e 03b4 	CALL SUBOPT_0x5
00025f 89e8      	LDD  R30,Y+16
000260 89f9      	LDD  R31,Y+16+1
000261 81a4      	LDD  R26,Z+4
000262 93aa      	ST   -Y,R26
000263 940e 03ba 	CALL SUBOPT_0x6
000265 c0ce      	RJMP _0x2040030
                 _0x204002F:
000266 37e3      	CPI  R30,LOW(0x73)
000267 f441      	BRNE _0x2040032
000268 940e 03b4 	CALL SUBOPT_0x5
00026a 940e 03c0 	CALL SUBOPT_0x7
00026c 940e 0372 	CALL _strlen
00026e 2f1e      	MOV  R17,R30
00026f c00a      	RJMP _0x2040033
                 _0x2040032:
000270 37e0      	CPI  R30,LOW(0x70)
000271 f461      	BRNE _0x2040035
000272 940e 03b4 	CALL SUBOPT_0x5
000274 940e 03c0 	CALL SUBOPT_0x7
000276 940e 037e 	CALL _strlenf
000278 2f1e      	MOV  R17,R30
000279 6008      	ORI  R16,LOW(8)
                 _0x2040033:
00027a 6002      	ORI  R16,LOW(2)
00027b 770f      	ANDI R16,LOW(127)
00027c e030      	LDI  R19,LOW(0)
00027d c034      	RJMP _0x2040036
                 _0x2040035:
00027e 36e4      	CPI  R30,LOW(0x64)
00027f f011      	BREQ _0x2040039
000280 36e9      	CPI  R30,LOW(0x69)
000281 f411      	BRNE _0x204003A
                 _0x2040039:
000282 6004      	ORI  R16,LOW(4)
000283 c002      	RJMP _0x204003B
                 _0x204003A:
000284 37e5      	CPI  R30,LOW(0x75)
000285 f431      	BRNE _0x204003C
                 _0x204003B:
000286 e8ec      	LDI  R30,LOW(_tbl10_G102*2)
000287 e0f0      	LDI  R31,HIGH(_tbl10_G102*2)
000288 83ee      	STD  Y+6,R30
000289 83ff      	STD  Y+6+1,R31
00028a e015      	LDI  R17,LOW(5)
00028b c00c      	RJMP _0x204003D
                 _0x204003C:
00028c 35e8      	CPI  R30,LOW(0x58)
00028d f411      	BRNE _0x204003F
00028e 6008      	ORI  R16,LOW(8)
00028f c003      	RJMP _0x2040040
                 _0x204003F:
000290 37e8      	CPI  R30,LOW(0x78)
000291 f009      	BREQ PC+2
000292 c0a1      	RJMP _0x2040071
                 _0x2040040:
000293 e9e6      	LDI  R30,LOW(_tbl16_G102*2)
000294 e0f0      	LDI  R31,HIGH(_tbl16_G102*2)
000295 83ee      	STD  Y+6,R30
000296 83ff      	STD  Y+6+1,R31
000297 e014      	LDI  R17,LOW(4)
                 _0x204003D:
000298 ff02      	SBRS R16,2
000299 c014      	RJMP _0x2040042
00029a 940e 03b4 	CALL SUBOPT_0x5
00029c 940e 03ca 	CALL SUBOPT_0x8
00029e 85ab      	LDD  R26,Y+11
00029f 23aa      	TST  R26
0002a0 f43a      	BRPL _0x2040043
0002a1 85ea      	LDD  R30,Y+10
0002a2 85fb      	LDD  R31,Y+10+1
0002a3 940e 03e7 	CALL __ANEGW1
0002a5 87ea      	STD  Y+10,R30
0002a6 87fb      	STD  Y+10+1,R31
0002a7 e24d      	LDI  R20,LOW(45)
                 _0x2040043:
0002a8 3040      	CPI  R20,0
0002a9 f011      	BREQ _0x2040044
0002aa 5f1f      	SUBI R17,-LOW(1)
0002ab c001      	RJMP _0x2040045
                 _0x2040044:
0002ac 7f0b      	ANDI R16,LOW(251)
                 _0x2040045:
0002ad c004      	RJMP _0x2040046
                 _0x2040042:
0002ae 940e 03b4 	CALL SUBOPT_0x5
0002b0 940e 03ca 	CALL SUBOPT_0x8
                 _0x2040046:
                 _0x2040036:
0002b2 fd00      	SBRC R16,0
0002b3 c011      	RJMP _0x2040047
                 _0x2040048:
0002b4 1715      	CP   R17,R21
0002b5 f478      	BRSH _0x204004A
0002b6 ff07      	SBRS R16,7
0002b7 c008      	RJMP _0x204004B
0002b8 ff02      	SBRS R16,2
0002b9 c004      	RJMP _0x204004C
0002ba 7f0b      	ANDI R16,LOW(251)
0002bb 2f24      	MOV  R18,R20
0002bc 5011      	SUBI R17,LOW(1)
0002bd c001      	RJMP _0x204004D
                 _0x204004C:
0002be e320      	LDI  R18,LOW(48)
                 _0x204004D:
0002bf c001      	RJMP _0x204004E
                 _0x204004B:
0002c0 e220      	LDI  R18,LOW(32)
                 _0x204004E:
0002c1 940e 03ad 	CALL SUBOPT_0x4
0002c3 5051      	SUBI R21,LOW(1)
0002c4 cfef      	RJMP _0x2040048
                 _0x204004A:
                 _0x2040047:
0002c5 2f31      	MOV  R19,R17
0002c6 ff01      	SBRS R16,1
0002c7 c017      	RJMP _0x204004F
                 _0x2040050:
0002c8 3030      	CPI  R19,0
0002c9 f0a1      	BREQ _0x2040052
0002ca ff03      	SBRS R16,3
0002cb c006      	RJMP _0x2040053
0002cc 81ee      	LDD  R30,Y+6
0002cd 81ff      	LDD  R31,Y+6+1
0002ce 9125      	LPM  R18,Z+
0002cf 83ee      	STD  Y+6,R30
0002d0 83ff      	STD  Y+6+1,R31
0002d1 c005      	RJMP _0x2040054
                 _0x2040053:
0002d2 81ae      	LDD  R26,Y+6
0002d3 81bf      	LDD  R27,Y+6+1
0002d4 912d      	LD   R18,X+
0002d5 83ae      	STD  Y+6,R26
0002d6 83bf      	STD  Y+6+1,R27
                 _0x2040054:
0002d7 940e 03ad 	CALL SUBOPT_0x4
0002d9 3050      	CPI  R21,0
0002da f009      	BREQ _0x2040055
0002db 5051      	SUBI R21,LOW(1)
                 _0x2040055:
0002dc 5031      	SUBI R19,LOW(1)
0002dd cfea      	RJMP _0x2040050
                 _0x2040052:
0002de c04b      	RJMP _0x2040056
                 _0x204004F:
                 _0x2040058:
0002df e320      	LDI  R18,LOW(48)
0002e0 81ee      	LDD  R30,Y+6
0002e1 81ff      	LDD  R31,Y+6+1
0002e2 940e 03f7 	CALL __GETW1PF
0002e4 87e8      	STD  Y+8,R30
0002e5 87f9      	STD  Y+8+1,R31
0002e6 81ee      	LDD  R30,Y+6
0002e7 81ff      	LDD  R31,Y+6+1
0002e8 9632      	ADIW R30,2
0002e9 83ee      	STD  Y+6,R30
0002ea 83ff      	STD  Y+6+1,R31
                 _0x204005A:
0002eb 85e8      	LDD  R30,Y+8
0002ec 85f9      	LDD  R31,Y+8+1
0002ed 85aa      	LDD  R26,Y+10
0002ee 85bb      	LDD  R27,Y+10+1
0002ef 17ae      	CP   R26,R30
0002f0 07bf      	CPC  R27,R31
0002f1 f050      	BRLO _0x204005C
0002f2 5f2f      	SUBI R18,-LOW(1)
0002f3 85a8      	LDD  R26,Y+8
0002f4 85b9      	LDD  R27,Y+8+1
0002f5 85ea      	LDD  R30,Y+10
0002f6 85fb      	LDD  R31,Y+10+1
0002f7 1bea      	SUB  R30,R26
0002f8 0bfb      	SBC  R31,R27
0002f9 87ea      	STD  Y+10,R30
0002fa 87fb      	STD  Y+10+1,R31
0002fb cfef      	RJMP _0x204005A
                 _0x204005C:
0002fc 332a      	CPI  R18,58
0002fd f028      	BRLO _0x204005D
0002fe ff03      	SBRS R16,3
0002ff c002      	RJMP _0x204005E
000300 5f29      	SUBI R18,-LOW(7)
000301 c001      	RJMP _0x204005F
                 _0x204005E:
000302 5d29      	SUBI R18,-LOW(39)
                 _0x204005F:
                 _0x204005D:
000303 fd04      	SBRC R16,4
000304 c01a      	RJMP _0x2040061
000305 3321      	CPI  R18,49
000306 f420      	BRSH _0x2040063
000307 85a8      	LDD  R26,Y+8
000308 85b9      	LDD  R27,Y+8+1
000309 9711      	SBIW R26,1
00030a f409      	BRNE _0x2040062
                 _0x2040063:
00030b c009      	RJMP _0x20400CD
                 _0x2040062:
00030c 1753      	CP   R21,R19
00030d f010      	BRLO _0x2040067
00030e ff00      	SBRS R16,0
00030f c001      	RJMP _0x2040068
                 _0x2040067:
000310 c013      	RJMP _0x2040066
                 _0x2040068:
000311 e220      	LDI  R18,LOW(32)
000312 ff07      	SBRS R16,7
000313 c00b      	RJMP _0x2040069
000314 e320      	LDI  R18,LOW(48)
                 _0x20400CD:
000315 6100      	ORI  R16,LOW(16)
000316 ff02      	SBRS R16,2
000317 c007      	RJMP _0x204006A
000318 7f0b      	ANDI R16,LOW(251)
000319 934a      	ST   -Y,R20
00031a 940e 03ba 	CALL SUBOPT_0x6
00031c 3050      	CPI  R21,0
00031d f009      	BREQ _0x204006B
00031e 5051      	SUBI R21,LOW(1)
                 _0x204006B:
                 _0x204006A:
                 _0x2040069:
                 _0x2040061:
00031f 940e 03ad 	CALL SUBOPT_0x4
000321 3050      	CPI  R21,0
000322 f009      	BREQ _0x204006C
000323 5051      	SUBI R21,LOW(1)
                 _0x204006C:
                 _0x2040066:
000324 5031      	SUBI R19,LOW(1)
000325 85a8      	LDD  R26,Y+8
000326 85b9      	LDD  R27,Y+8+1
000327 9712      	SBIW R26,2
000328 f008      	BRLO _0x2040059
000329 cfb5      	RJMP _0x2040058
                 _0x2040059:
                 _0x2040056:
00032a ff00      	SBRS R16,0
00032b c008      	RJMP _0x204006D
                 _0x204006E:
00032c 3050      	CPI  R21,0
00032d f031      	BREQ _0x2040070
00032e 5051      	SUBI R21,LOW(1)
00032f e2e0      	LDI  R30,LOW(32)
000330 93ea      	ST   -Y,R30
000331 940e 03ba 	CALL SUBOPT_0x6
000333 cff8      	RJMP _0x204006E
                 _0x2040070:
                 _0x204006D:
                 _0x2040071:
                 _0x2040030:
                 _0x20400CC:
000334 e010      	LDI  R17,LOW(0)
                 _0x204001B:
000335 cee0      	RJMP _0x2040016
                 _0x2040018:
000336 85ac      	LDD  R26,Y+12
000337 85bd      	LDD  R27,Y+12+1
000338 940e 03f3 	CALL __GETW1P
00033a 940e 0407 	CALL __LOADLOCR6
00033c 9664      	ADIW R28,20
00033d 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
00033e 92ff      	PUSH R15
00033f 2ef8      	MOV  R15,R24
000340 9726      	SBIW R28,6
000341 940e 0402 	CALL __SAVELOCR4
000343 940e 03d2 	CALL SUBOPT_0x9
000345 9730      	SBIW R30,0
000346 f419      	BRNE _0x2040072
000347 efef      	LDI  R30,LOW(65535)
000348 efff      	LDI  R31,HIGH(65535)
000349 c023      	RJMP _0x20C0001
                 _0x2040072:
00034a 01de      	MOVW R26,R28
00034b 9616      	ADIW R26,6
00034c 940e 03e3 	CALL __ADDW2R15
00034e 018d      	MOVW R16,R26
00034f 940e 03d2 	CALL SUBOPT_0x9
000351 83ee      	STD  Y+6,R30
000352 83ff      	STD  Y+6+1,R31
000353 e0e0      	LDI  R30,LOW(0)
000354 87e8      	STD  Y+8,R30
000355 87e9      	STD  Y+8+1,R30
000356 01de      	MOVW R26,R28
000357 961a      	ADIW R26,10
000358 940e 03e3 	CALL __ADDW2R15
00035a 940e 03f3 	CALL __GETW1P
00035c 93fa      	ST   -Y,R31
00035d 93ea      	ST   -Y,R30
00035e 931a      	ST   -Y,R17
00035f 930a      	ST   -Y,R16
000360 ecea      	LDI  R30,LOW(_put_buff_G102)
000361 e0f1      	LDI  R31,HIGH(_put_buff_G102)
000362 93fa      	ST   -Y,R31
000363 93ea      	ST   -Y,R30
000364 01de      	MOVW R26,R28
000365 961a      	ADIW R26,10
000366 dea3      	RCALL __print_G102
000367 019f      	MOVW R18,R30
000368 81ae      	LDD  R26,Y+6
000369 81bf      	LDD  R27,Y+6+1
00036a e0e0      	LDI  R30,LOW(0)
00036b 93ec      	ST   X,R30
00036c 01f9      	MOVW R30,R18
                 _0x20C0001:
00036d 940e 0409 	CALL __LOADLOCR4
00036f 962a      	ADIW R28,10
000370 90ff      	POP  R15
000371 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000372 93ba      	ST   -Y,R27
000373 93aa      	ST   -Y,R26
000374 91a9          ld   r26,y+
000375 91b9          ld   r27,y+
000376 27ee          clr  r30
000377 27ff          clr  r31
                 strlen0:
000378 916d          ld   r22,x+
000379 2366          tst  r22
00037a f011          breq strlen1
00037b 9631          adiw r30,1
00037c cffb          rjmp strlen0
                 strlen1:
00037d 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
00037e 93ba      	ST   -Y,R27
00037f 93aa      	ST   -Y,R26
000380 27aa          clr  r26
000381 27bb          clr  r27
000382 91e9          ld   r30,y+
000383 91f9          ld   r31,y+
                 strlenf0:
000384 9005      	lpm  r0,z+
000385 2000          tst  r0
000386 f011          breq strlenf1
000387 9611          adiw r26,1
000388 cffb          rjmp strlenf0
                 strlenf1:
000389 01fd          movw r30,r26
00038a 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _data:
000500           	.BYTE 0x10
                 __base_y_G100:
000510           	.BYTE 0x4
                 __seed_G101:
000514           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
00038b 940e 015c 	CALL _lcd_gotoxy
00038d e0e0      	LDI  R30,LOW(_data)
00038e e0f5      	LDI  R31,HIGH(_data)
00038f 93fa      	ST   -Y,R31
000390 93ea      	ST   -Y,R30
000391 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x1:
000392 27ff      	CLR  R31
000393 2766      	CLR  R22
000394 2777      	CLR  R23
000395 940e 03fb 	CALL __PUTPARD1
000397 e084      	LDI  R24,4
000398 940e 033e 	CALL _sprintf
00039a 9628      	ADIW R28,8
00039b e0a0      	LDI  R26,LOW(_data)
00039c e0b5      	LDI  R27,HIGH(_data)
00039d 940c 018a 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
00039f 940e 0150 	CALL __lcd_write_data
0003a1 e0a3      	LDI  R26,LOW(3)
0003a2 e0b0      	LDI  R27,0
0003a3 940c 03d9 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x3:
0003a5 e3a0      	LDI  R26,LOW(48)
0003a6 940e 012b 	CALL __lcd_write_nibble_G100
                +
0003a8 ec88     +LDI R24 , LOW ( 200 )
0003a9 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0003aa 9701     +SBIW R24 , 1
0003ab f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0003ac 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x4:
0003ad 932a      	ST   -Y,R18
0003ae 85ad      	LDD  R26,Y+13
0003af 85be      	LDD  R27,Y+13+1
0003b0 85ef      	LDD  R30,Y+15
0003b1 89f8      	LDD  R31,Y+15+1
0003b2 9509      	ICALL
0003b3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x5:
0003b4 89e8      	LDD  R30,Y+16
0003b5 89f9      	LDD  R31,Y+16+1
0003b6 9734      	SBIW R30,4
0003b7 8be8      	STD  Y+16,R30
0003b8 8bf9      	STD  Y+16+1,R31
0003b9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6:
0003ba 85ad      	LDD  R26,Y+13
0003bb 85be      	LDD  R27,Y+13+1
0003bc 85ef      	LDD  R30,Y+15
0003bd 89f8      	LDD  R31,Y+15+1
0003be 9509      	ICALL
0003bf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x7:
0003c0 89a8      	LDD  R26,Y+16
0003c1 89b9      	LDD  R27,Y+16+1
0003c2 9614      	ADIW R26,4
0003c3 940e 03f3 	CALL __GETW1P
0003c5 83ee      	STD  Y+6,R30
0003c6 83ff      	STD  Y+6+1,R31
0003c7 81ae      	LDD  R26,Y+6
0003c8 81bf      	LDD  R27,Y+6+1
0003c9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x8:
0003ca 89a8      	LDD  R26,Y+16
0003cb 89b9      	LDD  R27,Y+16+1
0003cc 9614      	ADIW R26,4
0003cd 940e 03f3 	CALL __GETW1P
0003cf 87ea      	STD  Y+10,R30
0003d0 87fb      	STD  Y+10+1,R31
0003d1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
0003d2 01de      	MOVW R26,R28
0003d3 961c      	ADIW R26,12
0003d4 940e 03e3 	CALL __ADDW2R15
0003d6 940e 03f3 	CALL __GETW1P
0003d8 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0003d9 9610      	adiw r26,0
0003da f039      	breq __delay_ms1
                 __delay_ms0:
                +
0003db ed80     +LDI R24 , LOW ( 0x7D0 )
0003dc e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0003dd 9701     +SBIW R24 , 1
0003de f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0003df 95a8      	wdr
0003e0 9711      	sbiw r26,1
0003e1 f7c9      	brne __delay_ms0
                 __delay_ms1:
0003e2 9508      	ret
                 
                 __ADDW2R15:
0003e3 2400      	CLR  R0
0003e4 0daf      	ADD  R26,R15
0003e5 1db0      	ADC  R27,R0
0003e6 9508      	RET
                 
                 __ANEGW1:
0003e7 95f1      	NEG  R31
0003e8 95e1      	NEG  R30
0003e9 40f0      	SBCI R31,0
0003ea 9508      	RET
                 
                 __LSLB12:
0003eb 23ee      	TST  R30
0003ec 2e0e      	MOV  R0,R30
0003ed 2fea      	MOV  R30,R26
0003ee f019      	BREQ __LSLB12R
                 __LSLB12L:
0003ef 0fee      	LSL  R30
0003f0 940a      	DEC  R0
0003f1 f7e9      	BRNE __LSLB12L
                 __LSLB12R:
0003f2 9508      	RET
                 
                 __GETW1P:
0003f3 91ed      	LD   R30,X+
0003f4 91fc      	LD   R31,X
0003f5 9711      	SBIW R26,1
0003f6 9508      	RET
                 
                 __GETW1PF:
0003f7 9005      	LPM  R0,Z+
0003f8 91f4      	LPM  R31,Z
0003f9 2de0      	MOV  R30,R0
0003fa 9508      	RET
                 
                 __PUTPARD1:
0003fb 937a      	ST   -Y,R23
0003fc 936a      	ST   -Y,R22
0003fd 93fa      	ST   -Y,R31
0003fe 93ea      	ST   -Y,R30
0003ff 9508      	RET
                 
                 __SAVELOCR6:
000400 935a      	ST   -Y,R21
                 __SAVELOCR5:
000401 934a      	ST   -Y,R20
                 __SAVELOCR4:
000402 933a      	ST   -Y,R19
                 __SAVELOCR3:
000403 932a      	ST   -Y,R18
                 __SAVELOCR2:
000404 931a      	ST   -Y,R17
000405 930a      	ST   -Y,R16
000406 9508      	RET
                 
                 __LOADLOCR6:
000407 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000408 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000409 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00040a 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00040b 8119      	LDD  R17,Y+1
00040c 8108      	LD   R16,Y
00040d 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128A register use summary:
r0 :  13 r1 :   3 r2 :   0 r3 :   0 r4 :   1 r5 :   1 r6 :   4 r7 :   4 
r8 :   0 r9 :   2 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  38 r17:  28 r18:  29 r19:  10 r20:   9 r21:  17 r22:   8 r23:   2 
r24:  32 r25:   5 r26: 114 r27:  45 r28:  17 r29:   1 r30: 188 r31:  64 
x  :  26 y  : 192 z  :  16 
Registers used: 27 out of 35 (77.1%)

ATmega128A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   7 
adiw  :  26 and   :   0 andi  :   8 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  24 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   0 brmi  :   1 brne  :  35 brpl  :   1 brsh  :   4 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  58 
cbi   :  11 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  10 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   5 cpc   :   2 cpi   :  36 cpse  :   0 dec   :  10 des   :   0 
elpm  :   0 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 
ijmp  :   0 in    :   0 inc   :   2 jmp   :  38 ld    :  29 ldd   :  88 
ldi   : 113 lds   :   0 lpm   :  14 lsl   :   1 lsr   :   0 mov   :  22 
movw  :  17 mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 
or    :   1 ori   :   6 out   :   8 pop   :   1 push  :   1 rcall :  17 
ret   :  27 reti  :   0 rjmp  :  75 rol   :   0 ror   :   0 sbc   :   1 
sbci  :   2 sbi   :  16 sbic  :   3 sbis  :   4 sbiw  :  20 sbr   :   0 
sbrc  :   2 sbrs  :  10 sec   :   0 seh   :   0 sei   :   0 sen   :   0 
ser   :   0 ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :  70 std   :  35 sts   :   3 sub   :   2 subi  :  18 
swap  :   1 tst   :   5 wdr   :   1 
Instructions used: 54 out of 117 (46.2%)

ATmega128A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00081c   2008     68   2076  131072   1.6%
[.dseg] 0x000100 0x000518      0     24     24    4096   0.6%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 8 warnings
